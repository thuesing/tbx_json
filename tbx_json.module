<?php
/**
 * @file
 * Module file for tbx_json.
 * Parse JSON for Tbx.
 *  
 */



 /*
* http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_update/7
* parse exhibit db on update and delete
* Note that when this hook is invoked, the changes have not yet been written to the database, 
*/


function tbx_json_node_insert($node){
  tbx_json_export_nodes($node);
}

function tbx_json_node_update($node){
  tbx_json_export_nodes($node);
}

function tbx_json_node_delete($node){
  tbx_json_export_nodes($node);
}



 /* 
  * Taxonomy Hooks
  * parse Taxonomies
  * tbx_json_taxonomy_vocabulary_update($vocabulary)
  * http://drupalapi.de/api/drupal/drupal%21modules%21taxonomy%21taxonomy.api.php/drupal-7
  */

// hooks on hierarchy updates !
function tbx_json_taxonomy_vocabulary_update($voc) { 
  watchdog('tbx_json' , 'taxo %1 has been updated', array('%1' => $voc->machine_name ) , WATCHDOG_INFO); 
  tbx_json_export_taxos();
}

// term hooks
function tbx_json_taxonomy_term_delete($term) {
  watchdog('tbx_json' , 'term %1 has been deleted', array('%1' => $term->name ) , WATCHDOG_INFO); 
  tbx_json_export_taxos();
}
function tbx_json_taxonomy_term_update($term) {
   watchdog('tbx_json' , 'term %1 has been updated', array('%1' => $term->name ) , WATCHDOG_INFO);
   tbx_json_export_taxos();
}
function tbx_json_taxonomy_term_insert($term) {
   watchdog('tbx_json' , 'term %1 has been inserted', array('%1' => $term->name ) , WATCHDOG_INFO); 
   tbx_json_export_taxos();
}


/*
* clear cache for node and taxos
* call export scripts for nodes and taxos 
*/

function tbx_json_export_taxos() {
  try {
    // reset cache for vocs
    entity_get_controller('taxonomy_vocabulary')->resetCache();
    entity_get_controller('taxonomy_term')->resetCache();
    require_once 'parse-taxos.script.php';
    // reset node cache
    entity_get_controller('node')->resetCache();
    require_once 'parse-experts.script.php';
    require_once 'parse-models.script.php';
    require_once 'parse-practices.script.php';
    watchdog('tbx_json' , 'finished parsing taxonomies json', array() , WATCHDOG_INFO); 
  } catch (Exception $e) {
    $msg = $e->getMessage() . ' in '.$e->getFile(). ', line: '. $e->getLine() ;
    watchdog('tbx_json',  $msg , array() , WATCHDOG_ERROR);
    $site_email = variable_get('site_mail', ini_get('sendmail_from'));
    tbx_drupal_mail($site_email, $site_email, 'Tbx Error notification', $msg);
  }

}


/*
* clear cache for node and call export scripts
*/

function tbx_json_export_nodes(&$node) {
  try {
      $export_if = array('expert','model', 'practice');
      if ( in_array($node->type, $export_if)) {

            watchdog('tbx_json' , 'node %1 of type %2 has changed', array('%1' =>  $node->title , '%2' => $node->type ) , WATCHDOG_INFO);
             // reset cache for node
             entity_get_controller('node')->resetCache(array($node->nid));

            if ($node->type == 'expert') {
              require_once 'parse-experts.script.php';
            } else if ($node->type == 'model') {
              require_once 'parse-models.script.php';
            } else if ($node->type == 'practice') {
              require_once 'parse-practices.script.php';
            }
      }

  } catch (Exception $e) {
    $msg = $e->getMessage() . ' in '.$e->getFile(). ', line: '. $e->getLine() ;
    watchdog('tbx_json',  $msg , array() , WATCHDOG_ERROR);
    $site_email = variable_get('site_mail', ini_get('sendmail_from'));
    tbx_drupal_mail($site_email, $site_email, 'Tbx Error notification', $msg);
  }

}



/**
* Simple wrapper function for drupal_mail() to avoid extraneous code.
* @see http://www.midwesternmac.com/blogs/jeff-geerling/wrapper-function-simple
*/
function tbx_drupal_mail($from = 'default_from', $to, $subject, $message) {
  $my_module = 'custom';
  $my_mail_token = microtime();
  if ($from == 'default_from') {
    // Change this to your own default 'from' email address.
    $from = variable_get('system_mail', 'My Email Address <example@example.com>');
  }
  $message = array(
    'id' => $my_module . '_' . $my_mail_token,
    'to' => $to,
    'subject' => $subject,
    'body' => array($message),
    'headers' => array(
      'From' => $from, 
      'Sender' => $from, 
      'Return-Path' => $from,
    ),
  );
  $system = drupal_mail_system($my_module, $my_mail_token);
  $message = $system->format($message);
  if ($system->mail($message)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


